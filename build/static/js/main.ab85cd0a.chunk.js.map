{"version":3,"sources":["CustomerAssignments.js","Customers.js","EmployeeAssignments.js","Employees.js","App.js","serviceWorker.js","index.js"],"names":["CustomerAssignments","className","colSpan","this","props","customer","assignments","filter","assignment","overview","length","map","index","key","employee","name","scope","href","cardUrl","target","item","title","hasAssignment","startDate","endDate","alert","React","Component","Customers","monthNames","months","Date","getMonth","i","push","state","month","data","EmployeeAssignments","Employees","App","employees","customers","activeViewId","setState","axios","get","then","result","console","log","window","location","reload","id","onClick","setActiveViewId","icon","faBuilding","faUser","resetCache","faSync","activeView","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ab85cd0a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nexport default class CustomerAssignments extends React.Component {\n  render() {\n    return (\n      <tbody>\n        <tr>\n          <td className=\"tableRowSeparator\" colSpan=\"13\"></td>\n        </tr>\n        {this.props.customer.assignments && this.props.customer.assignments.filter((assignment) => assignment.overview.length).map((assignment, index) =>\n            <tr key={assignment.employee.name}>\n              <th scope=\"row\">{index === 0 ? <a href={this.props.customer.cardUrl} target=\"_blank\">{this.props.customer.name}</a> : ''}</th>\n              {assignment.overview.map((item, index) =>\n                <td key={assignment.employee.name + index}\n                    title={item.hasAssignment ? `${assignment.employee.name} ${assignment.startDate} → ${assignment.endDate}` : '' } \n                    colSpan={item.colSpan} className={item.hasAssignment ? (assignment.alert ? 'needContract' : 'onContract') : 'offContract' }>\n                      {item.hasAssignment ? <a href={assignment.employee.cardUrl} target=\"_blank\">{assignment.employee.name}</a> : ''}\n                </td>\n              )}\n            </tr>\n        )}\n      </tbody>\n    );\n  }\n}\n","import React from 'react';\nimport CustomerAssignments from './CustomerAssignments';\n\nexport default class Customers extends React.Component {\n  constructor(props) {\n    super(props);\n    var monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'Maj', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dec'],\n      months = [],\n      index = (new Date()).getMonth();\n    for (var i = 0; i < 12; i++) {\n      months.push(monthNames[index]);\n      index = index + 1 === 12 ? 0 : index + 1;\n    }\n    \n    this.state =  { months };\n  };\n\n  render() {\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th></th>\n            {this.state.months.map(month => <th key={month} scope=\"col\">{month}</th>)}\n          </tr>\n        </thead>\n        {this.props.data.map(customer => <CustomerAssignments key={customer.name} customer={customer} />)}\n      </table>\n    );\n  }\n}","import React from 'react';\nimport './App.css';\n\nexport default class EmployeeAssignments extends React.Component {\n  render() {\n    return this.props.employee.assignments.length ?\n      <tbody>\n        <tr>\n          <th scope=\"row\"><a href={this.props.employee.cardUrl} target=\"_blank\">{this.props.employee.name}</a></th>\n          {this.props.employee.assignments.map((assignment, index) =>\n            <td key={assignment.customer?.name + index} \n              title={assignment.customer ? `${assignment.customer.name} ${assignment.startDate} → ${assignment.endDate}` : '' } \n              colSpan={assignment.colSpan} \n              className={assignment.customer ? (assignment.alert ? 'needContract' : 'onContract') : 'offContract'}>\n                {assignment.customer ? <a href={assignment.customer.cardUrl} target=\"_blank\">{assignment.customer.name}</a> : ''}\n            </td>\n          )}\n        </tr>\n      </tbody>\n      : null\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport EmployeeAssignments from './EmployeeAssignments'\n\nexport default class Employees extends React.Component {\n  constructor(props) {\n    super(props);\n    var monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'Maj', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dec'],\n      months = [],\n      index = (new Date()).getMonth();\n    for (var i = 0; i < 12; i++) {\n      months.push(monthNames[index]);\n      index = index + 1 === 12 ? 0 : index + 1;\n    }\n    \n    this.state =  { months };\n  };\n\n  render() {\n    return (\n      <table className=\"employees\">\n        <thead>\n          <tr>\n            <th></th>\n            {this.state.months.map(month => <th key={month} scope=\"col\">{month}</th>)}\n          </tr>\n        </thead>\n        <tr>\n          <td className=\"tableRowSeparator\" colSpan=\"13\"></td>\n        </tr>\n        {this.props.data.map(employee => <EmployeeAssignments key={employee.name} employee={employee} />)}\n      </table>\n    );\n  }\n}\n","import React from 'react';\r\nimport Customers from './Customers';\r\nimport Employees from './Employees';\r\nimport axios from 'axios';\r\nimport './App.css';\r\n\r\nimport { faBuilding, faUser, faSync } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nexport default class App extends React.Component {\r\n  state = {\r\n    employees: [],\r\n    customers: [],\r\n    activeViewId: 'customers'\r\n  }\r\n\r\n  setActiveViewId(activeViewId) {\r\n    this.setState({activeViewId});\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios.get('/assignments').then((result) => {\r\n      this.setState(result.data);\r\n    });\r\n  }\r\n\r\n  resetCache() {\r\n    axios.get('/resetcache').then((result) => {\r\n      console.log('cache reset');\r\n      window.location.reload();\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const activeView = () => {\r\n      switch (this.state.activeViewId) {\r\n        case 'customers':\r\n          return <Customers data={this.state.customers} />\r\n        case 'employees':\r\n          return <Employees data={this.state.employees} />\r\n        default:\r\n          return null\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <div id=\"Menu\" className=\"btn-group\">\r\n          <a href=\"#\" onClick={() => this.setActiveViewId('customers')} className=\"btn\" title=\"customer dashboard\"><FontAwesomeIcon icon={faBuilding} /></a>\r\n          <a href=\"#\" onClick={() => this.setActiveViewId('employees')} className=\"btn\" title=\"employee dashboard\"><FontAwesomeIcon icon={faUser} /></a>\r\n          <a href=\"#\" onClick={this.resetCache} className=\"btn\" title=\"reset cache\"><FontAwesomeIcon icon={faSync} /></a>\r\n        </div>\r\n\r\n        {activeView()}\r\n      </div>\r\n    );\r\n  }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}